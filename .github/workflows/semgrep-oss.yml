# Name of this GitHub Actions workflow.
name: Semgrep OSS scan

permissions:
  contents: read
  pull-requests: write

on:
  # Scan changed files in PRs (diff-aware scanning):
  pull_request: {}
  # Scan on-demand through GitHub Actions interface:
  workflow_dispatch: {}

jobs:
  semgrep:
    # User definable name of this GitHub Actions job.
    name: semgrep-oss/scan
    # If you are self-hosting, change the following `runs-on` value: 
    runs-on: ubuntu-latest

    container:
      # A Docker image with Semgrep installed. Do not change this.
      image: semgrep/semgrep

    # Skip any PR created by dependabot to avoid permission issues:
    if: (github.actor != 'dependabot[bot]')

    steps:
    - name: Check out code
      # Fetch project source with GitHub Actions Checkout. Use either v3 or v4.
      uses: actions/checkout@v4

      # Run the "semgrep scan" command on the command line of the docker image.
    - name: Scan with semgrep
      run: semgrep scan --config auto --json --debug > semgrep_results.json

    - name: Convert Semgrep results to markdown
      run: |
        python - <<EOF
        import json

        with open("semgrep_results.json", "r") as file:
            results = json.load(file)

        comment_body = "### Semgrep Scan Results\n\n"
        if results["results"]:
            for result in results["results"]:
                path = result["path"]
                start_line = result["start"]["line"]
                message = result["extra"]["message"]
                rule_id = result["check_id"]
                comment_body += f"- **{path}:{start_line}** - {rule_id} - {message}\n"
        else:
            comment_body += "No issues found."

        with open("semgrep_comment.md", "w") as file:
            file.write(comment_body)
        EOF

    - name: Post comment with results
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const results = fs.readFileSync('semgrep_comment.md', 'utf8');
          github.rest.issues.createComment({
            ...context.repo,
            issue_number: context.issue.number,
            body: results
          });
