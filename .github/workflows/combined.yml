name: Security scan

permissions:
  contents: read
  issues: write
  pull-requests: write

on:
  # pull_request: {}
  workflow_dispatch: {}

jobs:
  sast-scan:
    name: sast-scan

    runs-on: ubuntu-latest

    container:
      image: semgrep/semgrep:sha-43d9ebd

    if: (github.actor != 'dependabot[bot]') && (github.event_name == 'pull_request')

    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run Trivy scanner
      uses: aquasecurity/trivy-action@0.24.0
      with:
        scan-type: 'fs'
        scanners: 'vuln,misconfig'
        hide-progress: true
        ignore-unfixed: true
        format: 'json'
        output: 'trivy_results.json'

    - name: Convert Trivy results to markdown
      run: |
        python - <<EOF
        import json

        with open("trivy_results.json", "r") as file:
          results = json.load(file)

        comment_body = "### Trivy Scan Results\n\n"
        if "Results" in results:
          for result in results["Results"]:
            if result["Class"] == "lang-pkgs" and "Vulnerabilities" in result:
              path = result["Target"]
              comment_body += f"- **{path}**\n"
              for vulnerability in result["Vulnerabilities"]:
                message = vulnerability["Title"]
                rule_id = vulnerability["VulnerabilityID"]
                severity = vulnerability["Severity"]
                pkg = vulnerability["PkgID"]
                fix = vulnerability["FixedVersion"]
                comment_body += f"  - {rule_id} - {severity} - {pkg} - {message} - **Fixed in version {fix}**\n"
            elif result["Class"] == "config" and "Misconfigurations" in result:
              path = result["Target"]
              comment_body += f"- **{path}**\n"
              for misconfiguration in result["Misconfigurations"]:
                message = misconfiguration["Title"]
                rule_id = misconfiguration["ID"]
                severity = misconfiguration["Severity"]
                url = misconfiguration["PrimaryURL"]
                file_lines = ""
                if "StartLine" in misconfiguration["CauseMetadata"] and "EndLine" in misconfiguration["CauseMetadata"]:
                  file_lines = str(misconfiguration["CauseMetadata"]["StartLine"]) + ":" + str(misconfiguration["CauseMetadata"]["EndLine"]) + " "
                comment_body += f"  - {file_lines}[{rule_id}]({url}) - {severity} - {message}\n"
            else:
              comment_body += "No software composition analysis or security misconfiguration issues found.\n\n"

        with open("comment.md", "w") as file:
          file.write(comment_body)
        EOF

    - name: Scan with semgrep
      run: semgrep scan --json --oss-only --include=*.ts --include=*.js --include=*.py --include=*.cs > semgrep_results.json

    - name: Convert Semgrep results to markdown
      run: |
        python - <<EOF
        import json

        with open("semgrep_results.json", "r") as file:
            results = json.load(file)

        comment_body = "### Semgrep Scan Results\n\n"
        if results["results"]:
            for result in results["results"]:
                path = result["path"]
                start_line = result["start"]["line"]
                message = result["extra"]["message"]
                rule_id = result["check_id"]
                severity = result["extra"]["metadata"]["impact"]
                comment_body += f"- **{path}:{start_line}** - {severity} - {rule_id} - {message}\n"
        else:
            comment_body += "No code security issues found.\n\n"

        with open("comment.md", "a") as file:
            file.write(comment_body)
        EOF

    - name: Post comment with results
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const results = fs.readFileSync('comment.md', 'utf8');
          github.rest.issues.createComment({
            ...context.repo,
            issue_number: context.issue.number,
            body: results
          });

  secrets-scan:
    name: secrets-scan

    runs-on: ubuntu-latest

    if: (github.actor != 'dependabot[bot]') && (github.event_name == 'pull_request')

    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: TruffleHog OSS
      id: trufflehog
      uses: trufflesecurity/trufflehog@v3.80.1
      continue-on-error: true
      with:
        path: ./
        base: "${{ github.event.repository.default_branch }}"
        head: HEAD

    - name: TruffleHog Scan Results Success
      if: steps.trufflehog.outcome != 'failure'
      run: |
        python - <<EOF
        comment_body = "### TruffleHog Scan Results\n\n"
        comment_body += "No new secrets found.\n\n"

        with open("comment.md", "a") as file:
            file.write(comment_body)
        EOF

    - name: TruffleHog Scan Results Failure
      if: steps.trufflehog.outcome == 'failure'
      run: |
        python - <<EOF
        comment_body = "### TruffleHog Scan Results\n\n"
        comment_body += "**Valid secrets found.**\n\n Please check `Files changed` tab in PR to see identified secrets then remove and rotate.\n\n"

        with open("comment.md", "a") as file:
            file.write(comment_body)
        EOF

    - name: Post comment with results
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const results = fs.readFileSync('comment.md', 'utf8');
          github.rest.issues.createComment({
            ...context.repo,
            issue_number: context.issue.number,
            body: results
          });
        
    - name: Scan Results Status
      if: steps.trufflehog.outcome == 'failure'
      run: exit 1